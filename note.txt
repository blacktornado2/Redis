Redis -> in-memory data structure store used as a database, cache, message broker and streaming engine

- Redis is written in C
- Redis is supported on Linux and MacOS, but not on Winows. So we install it on Windows using WSL or docker
- default port of redis is 6379

* Installing Redis on Ubuntu or MacOS: follow official documentation
- sudo apt update
- sudo apt install redis
- sudo systemctl status redis
- sudo systemctl enable redis
- sudo systemctl start redis
- sudo systemctl stop redis
- sudo systemctl restart redis
- sudo systemctl restart redis-server
- sudo systemctl restart redis.server
- redis-cli --version
- redis-server --version

- redis = redis-server + redis-cli
- redis-server is redis-daemon, responsinle for storing and managing data in memory, runs in the background, listen for client connections, doesn't require user interaction
- redis-cli si a CLI(terminal program) where we issue commands which interacts with redis-server
- RedisInsight: Redis GUI (only GUI, we have to install and start redis-server separately)

* Keys
- The empty string is also a valid key
- The maximum allowed key size is 512MB
- Key should not be either very long or very short
- Try to stick with a schema. e.g.: "object-type:id" like "user:1000" 
- Dots or hyphens are often used for multi-word fields like "comment"4321:reply.to" or "comment:4321:reply-to"

* Redis Data Types
- String
- Lists: lists of strings sorted by insertion order
- Sets: Unordered collections of unique strings that act like sets from other prog. languages
- Sorted sets: Collections of unique strings that maintain order by each string's associated score
- Hashes: Record types modelled as collections of ield-value pairs. They are handy to represent objects
- Streams: 11:49
 
 * Basic Configuration Commands
- config get * : get all config settings
- config get requirepass : get specific config settings
- config set requirepass value : set specific config settings
- In Linux /etc/redis/redis.conf is path of configuration file redis. We can set and get all redis configuration from here

- redis-server : start redis-server 
- redis-cli : start redis-cli
- redis-cli -h <host> -p <port> -a <password> : start redis-cli with custom configuration
- systemctl status redis/redis-server/redis.service : check the status of redis
- systemctl enable redis : Enable redis
- systemctl disable redis : Disable redis
- systemctl start redis : Start redis
- systemctl stop redis : Stop redis
- systemctl restart redis: Restart redis, used when we made some changes to conf. file of redis

* String commands
- keys * : list all keys saved in redis
- set <key> <value> : set key  
- get <key> : get key specified
- del <key> : delete key
- flushall : delete all keys
- exists <key> : Does key exists or not
- By default, the key doesn;t expire(unless redis restarts)
- expire <key> <seconds> : set the expiry of a key in seconds
- rename <key> <newKey> : Rename the already set key to a new value
- ttl <key> : How much time is left for key to expire (TTL: Time-To-Live)
- strlen <key> : length of key's name
- setnx <key> <value> : set the key if already not present, set <key> overwrites the key, if present
- setex <key> <expiryInSeconds> <value> : Set key with expiry
- mset <key1> <value1> <key2> <value2> <key3> <value3> : Set multiple key value at once
- decr <key> : decrease the value of the key by 1, only works on Integers
- incr <key> :  increase the value of the key by 1, only works on Integers
- incrby <key> <increment> : Increase the value of key by increment specified

* List commands
- lpush <listName> [elements] : push elements to a list(last inserted element is at 0 index), e.g. lpush students ankit akash 
- rpush <listName> [elements] : push elements to a list(last inserted element is at last index)
- lpush and rpush will make a new list if the list doesn't exists 
- llen <listName> : no. of elements in the list
- lrange <listName> <startingIndex> <endingIndex> :  show elements in the range, e.g. lrange students 
- lrange <listName> 0 -1 : show whole list
- lpop <listName> : pop an element at 0th index
- lpop <listName> <noOfElements>: pop a number of elements from the starting
- lindex <listName> <index> : Return the element at the index specified
- lset <listName> <index> <newValue> : overwrite element at that index
- lpushx <listName> [elements] : insert new elements in the list, only if the list already exists

* Set commands
- unique elements, unordered 
- sadd <setName> [elements] : add elements to a set
- smembers <setName> : see all the members of the set
- scard <setName> : no. of elements in set
- srem <setName> [elements] : remove elements from a set
- spop <setName> : pop an element randomly from set

* Sorted set commands
- unique elements, sorted
- zadd 
- zrange

* Hash commands